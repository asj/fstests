#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# FS QA Test generic/733
#
# A v2 only version of generic/580

. ./common/preamble
_begin_fstest auto quick encrypt
echo

# Import common functions.
. ./common/filter
. ./common/encrypt

# real QA test starts here
_supported_fs generic
_require_scratch_encryption -v 2

_scratch_mkfs_encrypted &>> $seqres.full
_scratch_mount

keyspec=$TEST_KEY_IDENTIFIER
dir=$SCRATCH_MNT/dir

mkdir $dir
echo "# Setting v2 encryption policy"
_set_encpolicy $dir $keyspec
echo "# Getting v2 encryption policy"
_get_encpolicy $dir | _filter_scratch
echo "# Trying to create file without key added yet"
$XFS_IO_PROG -f $dir/file |& _filter_scratch
echo "# Getting encryption key status"
_enckey_status $SCRATCH_MNT $keyspec
echo "# Adding encryption key"
_add_enckey $SCRATCH_MNT "$TEST_RAW_KEY"
echo "# Creating encrypted file"
echo contents > $dir/file
echo "# Getting encryption key status"
_enckey_status $SCRATCH_MNT $keyspec
echo "# Removing encryption key"
_rm_enckey $SCRATCH_MNT $keyspec
echo "# Getting encryption key status"
_enckey_status $SCRATCH_MNT $keyspec
echo "# Verifying that the encrypted directory was \"locked\""
cat $dir/file |& _filter_scratch
cat "$(find $dir -type f)" |& _filter_scratch | cut -d ' ' -f3-

# Test removing key with a file open.
echo "# Re-adding encryption key"
_add_enckey $SCRATCH_MNT "$TEST_RAW_KEY"
echo "# Creating another encrypted file"
echo foo > $dir/file2
echo "# Removing key while an encrypted file is open"
exec 3< $dir/file
_rm_enckey $SCRATCH_MNT $keyspec
echo "# Non-open file should have been evicted"
cat $dir/file2 |& _filter_scratch
echo "# Open file shouldn't have been evicted"
cat $dir/file
echo "# Key should be in \"incompletely removed\" state"
_enckey_status $SCRATCH_MNT $keyspec
echo "# Closing file and removing key for real now"
exec 3<&-
_rm_enckey $SCRATCH_MNT $keyspec
cat $dir/file |& _filter_scratch

echo "# Cleaning up"
rm -rf $dir
_scratch_cycle_mount	# Clear all keys
echo

echo "# Trying to remove absent key"
_rm_enckey $SCRATCH_MNT abcdabcdabcdabcd

# success, all done
status=0
exit

